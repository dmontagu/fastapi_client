from datetime import datetime
from typing import Optional, List
from typing import Any  # noqa
from typing_extensions import Literal
from uuid import UUID
from pydantic import BaseModel, Schema

{{#models}}
{{#model}}
class {{classname}}(BaseModel):
{{#vars}}
{{#isEnum}}
    {{name}}: 'Literal[{{#allowableValues}}{{#values}}"{{{this}}}"{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}]' = Schema({{#required}}...{{/required}}{{^required}}None{{/required}}, alias="{{baseName}}")  # type: ignore
{{/isEnum}}
{{^isEnum}}
    {{name}}: "{{^required}}Optional[{{/required}}{{>_dataTypeModel}}{{^required}}]{{/required}}" = Schema({{#required}}...{{/required}}{{^required}}None{{/required}}, alias="{{baseName}}")  # type: ignore
{{/isEnum}}
{{/vars}}
{{/model}}
{{/models}}
